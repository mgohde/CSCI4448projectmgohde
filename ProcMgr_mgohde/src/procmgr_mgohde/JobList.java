package procmgr_mgohde;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;

/**
 * Retrieves a list of jobs from an executor service or node.
 * Due to the flexibility with which it does this, it can also retrieve a node list from the server.
 * @author mgohde
 */
public class JobList 
{
    private ArrayList<String> list;
    
    /**
     * This constructor fetches a list of running jobs (or running servers with the getServersInstead parameter set to true).
     * This list is effectively just a list of strings generated by the job service to represent the data desired.
     * @param addr
     * @param port
     * @param u
     * @param getServersInstead 
     */
    public JobList(String addr, int port, User u, boolean getServersInstead)
    {
        list=new ArrayList<String>();
        try
        {
            Socket s=new Socket(addr, port);
            PrintWriter out = new PrintWriter(s.getOutputStream(), true);
            BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream()));
            if(!getServersInstead)
            {
                out.println("listjobs");
            }
            
            else
            {
                out.println("list");
            }
            u.write(out, false);
            String line=in.readLine();
            
            while(!line.equals("OK") && !line.equals("ERR"))
            {
                list.add(line);
                line=in.readLine();
            }
            
            out.close();
            in.close();
            s.close();
        } catch(IOException e)
        {
            System.err.println("Queue service is not running on "+addr+":"+port);
        }
    }
    
    /**
     * Returns the list of jobs (or servers) generated in the constructor.
     * @return 
     */
    public ArrayList<String> getJobList()
    {
        return list;
    }
}
